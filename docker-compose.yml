services:
  # User Service Database
  user-db:
    image: postgres:15-alpine
    container_name: geoattend-user-db
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5433:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - geoattend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Course Service Database
  course-db:
    image: postgres:15-alpine
    container_name: geoattend-course-db
    environment:
      POSTGRES_DB: course_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5434:5432"
    volumes:
      - course_db_data:/var/lib/postgresql/data
    networks:
      - geoattend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d course_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Attendance Service Database
  attendance-db:
    image: postgres:15-alpine
    container_name: geoattend-attendance-db
    environment:
      POSTGRES_DB: attendance_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5435:5432"
    volumes:
      - attendance_db_data:/var/lib/postgresql/data
    networks:
      - geoattend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d attendance_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Notification Service Database
  notification-db:
    image: postgres:15-alpine
    container_name: geoattend-notification-db
    environment:
      POSTGRES_DB: notification_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5436:5432"
    volumes:
      - notification_db_data:/var/lib/postgresql/data
    networks:
      - geoattend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d notification_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  
  # # Eureka Service Discovery (commented out - not using Spring Cloud)
  # eureka-server:
  #   build: ./eureka-server
  #   container_name: geoattend-eureka
  #   ports:
  #     - "8761:8761"
  #   networks:
  #     - geoattend-network

  # # Config Server (commented out - not using Spring Cloud)
  # config-server:
  #   build: ./config-server
  #   container_name: geoattend-config
  #   ports:
  #     - "8888:8888"
  #   networks:
  #     - geoattend-network

  # User Service (FastAPI)
  user-service:
    build: ./user-service
    container_name: geoattend-user-service
    depends_on:
      user-db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:1234@user-db:5432/user_db
      SERVICE_PORT: 8001
      SECRET_KEY: user-service-secret-key-change-in-production
    ports:
      - "8001:8001"
    networks:
      - geoattend-network
    restart: on-failure
    volumes:
      - ./user-service:/app

  # Course Service (FastAPI)
  course-service:
    build: ./course-service
    container_name: geoattend-course-service
    depends_on:
      course-db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:1234@course-db:5432/course_db
      SERVICE_PORT: 8002
      USER_SERVICE_URL: http://user-service:8001
    ports:
      - "8002:8002"
    networks:
      - geoattend-network
    restart: on-failure
    volumes:
      - ./course-service:/app

  # Attendance Service (FastAPI)
  attendance-service:
    build: ./attendance-service
    container_name: geoattend-attendance-service
    depends_on:
      attendance-db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:1234@attendance-db:5432/attendance_db
      SERVICE_PORT: 8003
      USER_SERVICE_URL: http://user-service:8001
      COURSE_SERVICE_URL: http://course-service:8002
    ports:
      - "8003:8003"
    networks:
      - geoattend-network
    restart: on-failure
    volumes:
      - ./attendance-service:/app

  # Notification Service (FastAPI)
  notification-service:
    build: ./notification-service
    container_name: geoattend-notification-service
    depends_on:
      notification-db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:1234@notification-db:5432/notification_db
      SERVICE_PORT: 8004
      USER_SERVICE_URL: http://user-service:8001
      COURSE_SERVICE_URL: http://course-service:8002
      ATTENDANCE_SERVICE_URL: http://attendance-service:8003
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_FROM_EMAIL: noreply@geoattend.com
      SMTP_FROM_NAME: GeoAttend
      FCM_ENABLED: false
    ports:
      - "8004:8004"
    networks:
      - geoattend-network
    restart: on-failure
    volumes:
      - ./notification-service:/app

  # API Gateway (FastAPI)
  api-gateway:
    build: ./api-gateway
    container_name: geoattend-api-gateway
    depends_on:
      - user-service
      - course-service
      - attendance-service
      - notification-service
    environment:
      SERVICE_PORT: 8000
      USER_SERVICE_URL: http://user-service:8001
      COURSE_SERVICE_URL: http://course-service:8002
      ATTENDANCE_SERVICE_URL: http://attendance-service:8003
      NOTIFICATION_SERVICE_URL: http://notification-service:8004
      JWT_SECRET_KEY: geoattend-secret-key-change-in-production
      RATE_LIMIT_ENABLED: true
      RATE_LIMIT_PER_MINUTE: 60
    ports:
      - "8000:8000"
    networks:
      - geoattend-network
    restart: on-failure
    volumes:
      - ./api-gateway:/app

volumes:
  user_db_data:
  course_db_data:
  attendance_db_data:
  notification_db_data:

networks:
  geoattend-network:
    driver: bridge